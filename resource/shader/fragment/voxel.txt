#version 330 core

in vec4 vertexColor; // input variable from vs (same name and type)
in vec3 Normal;
in vec3 FragPos;

out vec4 FragColor;


uniform vec3 lightDirection;
uniform vec3 cameraPosition;

void main()
{
	vec3 lightColor = vec3(1.0f);

	//Ambient
	float amb = 0.1f;
	vec3 ambient = amb*lightColor;

	//Diffuse
	vec3 testLightDir = vec3(0.0f, 0.0f, 1.0f);
	vec3 norm = normalize(Normal);
	float diff = max(dot(norm, testLightDir), 0);
	vec3 diffuse = diff*lightColor;

	//Specular
	float specularStrength = 0.5f;
	vec3 viewDir = normalize(cameraPosition - FragPos);
	vec3 reflectDir = reflect(-lightDirection, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;

	FragColor = vec4((ambient + diffuse + specular) * vec3(vertexColor), 1.0f);
	//FragColor = vec4(Normal, 1.0f);
}